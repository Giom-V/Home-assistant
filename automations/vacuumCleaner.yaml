- id: zone_cleaning
  alias: Start Cleaning Room
  trigger:
    - platform: state
      entity_id: input_select.vacuum_room
      from: Select Input
  action:
    - service: script.vacuum_dispatch
      data_template:
        room: "{{ trigger.to_state.state }}"
    - service: input_select.select_option
      entity_id: input_select.vacuum_room
      data_template:
        option: Select Input
# - id: IFTTT_zone_cleaning_webhook
#   alias: Clean room as asked through IFTTT
#   trigger:
#     platform: webhook
#     webhook_id: vacuumDispatch
#     allowed_methods:
#       - POST
#     local_only: false
#   condition:
#     - condition: template
#       value_template: "{{ trigger.json.type == 'call_service' }}"
#     - condition: template
#       value_template: "{{ trigger.json.service == 'script.vacuum_dispatch' }}"
#   action:
#     - service: system_log.write
#       data_template:
#         message: "json received: {{ trigger.json }}"
#         level: info
#     - service: vacuum.set_fan_speed
#       data:
#         fan_speed: Standard
#         entity_id: vacuum.xiaomi_vacuum_cleaner
#     - service: script.vacuum_dispatch
#       data:
#         room: "{{ trigger.json.room }}"
# - id: IFTTT_zone_mopping_webhook
#   alias: Mop room as asked through IFTTT
#   trigger:
#     platform: webhook
#     webhook_id: vacuumMop
#     allowed_methods:
#       - POST
#     local_only: false
#   condition:
#     - condition: template
#       value_template: "{{ trigger.json.type == 'call_service' }}"
#     - condition: template
#       value_template: "{{ trigger.json.service == 'script.vacuum_mop' }}"
#   action:
#     - service: system_log.write
#       data_template:
#         message: "json received: {{ trigger.json }}"
#         level: info
#     - service: vacuum.set_fan_speed
#       data:
#         fan_speed: Gentle
#         entity_id: vacuum.xiaomi_vacuum_cleaner
#     - service: script.vacuum_dispatch
#       data:
#         room: "{{ trigger.json.room }}"
#     - delay:
#         minutes: 1
#     - wait_template: "{{ is_state('vacuum.xiaomi_vacuum_cleaner', 'docked') }}"
#     - service: vacuum.set_fan_speed
#       data:
#         fan_speed: Standard
#         entity_id: vacuum.xiaomi_vacuum_cleaner
# - id: IFTTT_stop_vacuum_webhook
#   alias: Stop vacuum as asked through IFTTT
#   trigger:
#     platform: webhook
#     webhook_id: vacuumStop
#     allowed_methods:
#       - POST
#     local_only: false
#   condition:
#     - condition: template
#       value_template: "{{ trigger.json.type == 'call_service' }}"
#     - condition: template
#       value_template: "{{ trigger.json.service == 'script.vacuum_stop' }}"
#   action:
#     - service: system_log.write
#       data_template:
#         message: "json received: {{ trigger.json }}"
#         level: info
#     - service: vacuum.stop
#       data:
#         entity_id: vacuum.xiaomi_vacuum_cleaner
# - id: IFTTT_recharge_vacuum_webhook
#   alias: Send vacuum to base as asked through IFTTT
#   trigger:
#     platform: webhook
#     webhook_id: vacuumGoToBase
#     allowed_methods:
#       - POST
#     local_only: false
#   condition:
#     - condition: template
#       value_template: "{{ trigger.json.type == 'call_service' }}"
#     - condition: template
#       value_template: "{{ trigger.json.service == 'script.vacuum_go_to_base' }}"
#   action:
#     - service: system_log.write
#       data_template:
#         message: "json received: {{ trigger.json }}"
#         level: info
#     - service: vacuum.return_to_base
#       data:
#         entity_id: vacuum.xiaomi_vacuum_cleaner
- id: vacuum_kitchen_and_dining_room_when_we_are_away
  alias: vacuum Kitchen and dining room when we are away
  trigger:
    - at: "14:00"
      platform: time
  condition:
    - condition: state
      entity_id: binary_sensor.people_home
      state: "off"
  action:
    - service: script.turn_on
      data:
        entity_id: script.vacuum_kitchen_and_diningroom
    - service: script.turn_on
      data:
        entity_id: script.vacuum_bathroom
- id: vacuum_kitchen_and_dining_room_when_we_are_away_covid_version
  alias: vacuum Kitchen and dining room when we are away (Covid version)
  trigger:
    - platform: state
      entity_id: person.guillaume, person.claire
      from: home
      for:
        minutes: 5
  condition:
    # - condition: state
    #   entity_id: vacuum.xiaomi_vacuum_cleaner
    #   state: 'docked'
    #   for:
    #     hours: 9
    - condition: template
      value_template: >
        {{ states('sensor.time') < states('input_datetime.nighttime_end')[0:5] }}
    - condition: time
      after: "08:00:00"
    - condition: template
      value_template: >
        {{ now().timestamp() > state_attr('input_datetime.last_vacuum','timestamp') + (12 * 60 * 60) }}
    - condition: state
      entity_id: input_boolean.visitors
      state: "off"
    - not:
        - condition: device
          device_id: 3bd7ea9094dacdcb707f482264f08014
          domain: vacuum
          entity_id: e2f21eb7f540d2cc583036257700ad55
          type: is_cleaning
        - condition: device
          device_id: 5cf729ccf4531403f3cbe23e4a80fecc
          domain: vacuum
          entity_id: f5343ef0c5abce9a544408954541df1d
          type: is_cleaning
    - condition: or
      conditions:
        - condition: state # This part is related to the WFH situation during the Covid pandemic
          entity_id: binary_sensor.workday_sensor
          state: "on"
        - condition: and
          conditions:
            - condition: state
              entity_id: binary_sensor.workday_sensor
              state: "off"
            - condition: state
              entity_id: person.guillaume
              state: not_home
              for:
                minutes: 5
            - condition: state
              entity_id: person.claire
              state: not_home
              for:
                minutes: 5
  action:
    - service: script.turn_on
      data:
        entity_id: script.vacuum_kitchen_and_diningroom
    - service: script.turn_on
      data:
        entity_id: script.vacuum_bathroom
- id: last_vacuum_clean_time_update
  alias: Update the time of the last cleaning
  trigger:
    - platform: state
      entity_id: vacuum.rondelle
      to: "cleaning"
      for:
        minutes: 5
  action:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.last_vacuum
      data:
        datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
- id: vacuum_fast_scan_auto_start_stop
  alias: start/stop xiaomi fast scan interval
  description: ""
  trigger:
    - platform: state
      entity_id:
        - vacuum.rondelle
    - platform: state
      entity_id:
        - vacuum.robbie
  condition: []
  action:
    - if:
        - condition: state
          entity_id: vacuum.rondelle
          state: docked
      then:
        - if:
            - condition: state
              entity_id: vacuum.robbie
              state: docked
          then:
            - service: automation.turn_off
              data: {}
              target:
                entity_id: automation.vacuum_fast_scan
          else:
            - service: automation.turn_on
              data: {}
              target:
                entity_id: automation.vacuum_fast_scan
      else:
        - service: automation.turn_on
          data: {}
          target:
            entity_id: automation.vacuum_fast_scan
  mode: single

- id: vacuum_fast_scan
  alias: update xiaomi map extractor
  description: ""
  trigger:
    - platform: time_pattern
      seconds: "10"
  condition: []
  action:
    - service: homeassistant.update_entity
      data: {}
      target:
        entity_id: camera.xiaomi_cloud_map_extractor
  initial_state: false
  mode: restart
