- id: LightOnSolarium30mnBeforSunset
  alias: swith light on at sunset on weekdays (if we have visitors)
  trigger:
  - platform: sun
    event: sunset
    offset: -00:30:00
  condition:
  - condition: template
    value_template: >
      {{ now().strftime("%H:%M:%S") > states('input_datetime.solarium_switch_on') }}
  - condition: template
    value_template: >
      {{ now().strftime("%H:%M:%S") < states('input_datetime.solarium_switch_off') }}
  - condition: state
    entity_id: input_boolean.visitors
    state: 'on'
  action:
  - service: light.turn_on
    entity_id: light.solarium
  - service: light.turn_on
    entity_id: light.white
  - service: input_datetime.set_datetime
    entity_id: input_datetime.solarium_timer_end
    data_template: 
      time: "{{ states('input_datetime.solarium_switch_off') }}"
  - service: notify.slack
    data:
      message: Lights on 30mn before sunset!
- id: LightOnSolariumAtSelectedtime
  alias: swith light on at selected time on weekdays (if we have visitors)
  trigger:
    platform: template
    value_template: "{{ states('sensor.time') == (state_attr('input_datetime.solarium_switch_on', 'timestamp') | int | timestamp_custom('%H:%M', True)) }}"
  condition:
  - condition: sun
    after: sunset
    after_offset: -00:30:00
  - condition: state
    entity_id: input_boolean.visitors
    state: 'on'
  action:
  - service: light.turn_on
    entity_id: light.solarium
  - service: light.turn_on
    entity_id: light.white
  - service: input_datetime.set_datetime
    entity_id: input_datetime.solarium_timer_end
    data_template: 
      time: "{{ states('input_datetime.solarium_switch_off')  }}"
  - service: notify.slack
    data:
      message: Lights on at 4:30!
- id: LightOffSolariumAtTheEndOfTheTimer
  alias: swith light off at 6:30pm on weekdays
  trigger:
    platform: template
    value_template: "{{ states('sensor.time') == states('input_datetime.solarium_timer_end')[0:5] }}"
  action:
  - service: light.turn_off
    entity_id: light.solarium
  - service: light.turn_off
    entity_id: light.white
  - service: input_datetime.set_datetime
    entity_id: input_datetime.solarium_timer_end
    data_template: 
      time: "{{ states('input_datetime.solarium_switch_off') }}"
  - service: notify.slack
    data:
      message: Timer finished, lights off!
    
- id: FreezerLight
  alias: Freezer light
  trigger:
  - type: opened
    platform: device
    device_id: 85bc07f4124e490eb8ba0082a9abf76c
    entity_id: binary_sensor.freezer_door
    domain: binary_sensor
  action:
  - entity_id: light.white
    service: light.turn_on
  - service: input_datetime.set_datetime
    entity_id: input_datetime.solarium_timer_end
    data_template: 
      time: "{% set new_timer = [ state_attr('input_datetime.solarium_timer_end' , 'timestamp'), (now().timestamp() + (5 * 60)) ] | max %} {{ new_timer | timestamp_custom('%H:%M', True) }}" #TODO: to be verified

- id: SolariumDoorOpened
  alias: Solarium door opened
  trigger:
  - type: opened
    platform: device
    device_id: eb097d5c6fd44da5b5fcd7ccd54b4674
    entity_id: binary_sensor.solarium_door
    domain: binary_sensor
  action:
  - service: homeassistant.turn_on
    entity_id: light.solarium
  - service: light.turn_on
    entity_id: light.white
  - service: input_datetime.set_datetime
    entity_id: input_datetime.solarium_timer_end
    data_template: 
      time: "{% set new_timer = [ state_attr('input_datetime.solarium_timer_end' , 'timestamp'), (now().timestamp() + (5 * 60)) ] | max %} {{ new_timer | timestamp_custom('%H:%M', True) }}" #TODO: to be verified
